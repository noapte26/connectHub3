/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package SearchEngineFrontEnd;

import Account.AccountLoad;
import Account.UserAccount;
import FriendMangement.BackEnd.BlockingListFileManager;
import FriendMangement.BackEnd.FriendListFileManager;
import FriendMangement.BackEnd.FriendSuggestionFileManager;
import GroupManagementBackEnd.Group;
import GroupManagementBackEnd.commonRole;
import GroupManagementFrontEnd.CreateGroupWindow;
import GroupManagementFrontEnd.GroupWindow;
import ProfileManagementFrontend.ProfileWindow;
import SearchEngineBackend.SearchEngine;
import groupDataBase.MembersFileManager;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.util.ArrayList;
import java.util.HashSet;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;

/**
 *
 * @author gg
 */
public class SearchEngineFrontend extends javax.swing.JFrame {

    private String authorId;
    public SearchEngineFrontend(String authorId) {
        initComponents();
        this.authorId = authorId;
        setTitle("Search Menu");
     input.setBackground(Color.GRAY); 
     input.setForeground(Color.WHITE);
     jScrollPane1.getViewport().setBackground(Color.GRAY);
     jScrollPane1.setBackground(Color.GRAY);
      setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        input = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));

        jScrollPane1.setBackground(new java.awt.Color(51, 51, 51));
        jScrollPane1.setToolTipText("");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/search.png"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel1MousePressed(evt);
            }
        });

        input.setFont(new java.awt.Font("Segoe UI", 2, 18)); // NOI18N
        input.setForeground(new java.awt.Color(255, 255, 255));
        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 399, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 511, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputActionPerformed

    private void jLabel1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MousePressed
       String userInput = input.getText();
       if (userInput.trim().isEmpty()) {
        // Show a message to the user to enter something
        javax.swing.JOptionPane.showMessageDialog(this, "Please enter a search term.", "Input Error", javax.swing.JOptionPane.WARNING_MESSAGE);
        return; // Exit the method if input is empty
    }
       SearchEngine searchEngine = new SearchEngine();
       HashSet<UserAccount> accounts = searchEngine.searchAccount(userInput);
       HashSet<Group> groups=searchEngine.searchGroup(userInput);
       displaySearchResults(accounts,groups);
       
       
    }//GEN-LAST:event_jLabel1MousePressed

   private JPanel createFriendPanel(UserAccount user) {
    UserAccount Account = getAcc(authorId);
    FriendSuggestionFileManager suggestionManager = new FriendSuggestionFileManager();
    FriendListFileManager friendManagerFriending = new FriendListFileManager();
    BlockingListFileManager fileManagerBlocking = new BlockingListFileManager();

    ArrayList<UserAccount> myFriends = friendManagerFriending.loadFriendList(authorId);

    JPanel panel = new JPanel(new BorderLayout());
    panel.setBackground(Color.decode("#121212"));
    panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10)); // Padding

    // Profile Picture
    JLabel profilePic = new JLabel(new ImageIcon(user.getProfile().getProfileImageUrl()));
    profilePic.setPreferredSize(new Dimension(75, 75));
    panel.add(profilePic, BorderLayout.WEST);

    // User details (Username and Status)
    JPanel userDetailsPanel = new JPanel();
    userDetailsPanel.setBackground(Color.decode("#121212"));
    userDetailsPanel.setLayout(new BoxLayout(userDetailsPanel, BoxLayout.Y_AXIS));

    // Username
    JLabel usernameLabel = new JLabel(user.getUser().getUserName());
    usernameLabel.setFont(new Font("Arial", Font.BOLD, 14));
    usernameLabel.setForeground(Color.WHITE);
    userDetailsPanel.add(usernameLabel);

    

    // Button Panel
    JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
    buttonPanel.setBackground(Color.decode("#121212"));
    JButton optionsButton = new JButton("..."); // Ellipsis for options
    optionsButton.setBackground(Color.decode("#121212"));
    optionsButton.setForeground(Color.WHITE);
    optionsButton.setPreferredSize(new Dimension(40, 30));
    optionsButton.setFocusPainted(false);

    // Create the popup menu
    JPopupMenu popupMenu = new JPopupMenu();

    // Dynamic menu generation
    optionsButton.addActionListener(e -> {
        popupMenu.removeAll(); // Clear previous menu items

        boolean isFriend = false;
        for (UserAccount friend : myFriends) {
            if (friend.getUser().getUserId().equals(user.getUser().getUserId())) {
                isFriend = true;

                // Block and Remove options for friends
                JMenuItem blockItem = new JMenuItem("Block");
                JMenuItem removeItem = new JMenuItem("Remove");

                blockItem.addActionListener(blockEvent -> {
                    fileManagerBlocking.blockUser(Account, user);
                    buttonPanel.removeAll();
                    JLabel blocked = new JLabel(" You blocked this user ");
                    blocked.setForeground(Color.LIGHT_GRAY);
                    blocked.setFont(new Font("Arial", Font.ITALIC, 12));
                    buttonPanel.add(blocked);
                    revalidate();
                    repaint();
                });

                removeItem.addActionListener(removeEvent -> {
                    friendManagerFriending.removeFriend(Account.getUser().getUserId(), user);
                    buttonPanel.removeAll();
                    JLabel removed = new JLabel(" You are no longer friends ");
                    removed.setForeground(Color.LIGHT_GRAY);
                    removed.setFont(new Font("Arial", Font.ITALIC, 12));
                    buttonPanel.add(removed);
                    revalidate();
                    repaint();
                });

                JMenuItem viewItem = new JMenuItem("View profile");
                viewItem.addActionListener( event-> {
                    ProfileWindow p=new ProfileWindow(user.getProfile(),user);
                });

                popupMenu.add(blockItem);
                popupMenu.add(removeItem);
                popupMenu.add(viewItem);
                break; // Exit the loop once the user is found as a friend
            }
        }

        if (!isFriend) {
            // Add Friend and Block options for non-friends
            JMenuItem addFriendItem = new JMenuItem("Add Friend");
            JMenuItem blockItem = new JMenuItem("Block");

            addFriendItem.addActionListener(addEvent -> {
                suggestionManager.addFriend(Account, user);
                buttonPanel.removeAll();
                JLabel added = new JLabel(" Friend request sent ");
                added.setForeground(Color.LIGHT_GRAY);
                added.setFont(new Font("Arial", Font.ITALIC, 12));
                buttonPanel.add(added);
                myFriends.add(user); // Update the friend list dynamically
                revalidate();
                repaint();
            });

            blockItem.addActionListener(blockEvent -> {
                fileManagerBlocking.blockUser(Account, user);
                buttonPanel.removeAll();
                JLabel blocked = new JLabel(" You blocked this user ");
                blocked.setForeground(Color.LIGHT_GRAY);
                blocked.setFont(new Font("Arial", Font.ITALIC, 12));
                buttonPanel.add(blocked);
                revalidate();
                repaint();
            });

            popupMenu.add(addFriendItem);
            popupMenu.add(blockItem);
        }

        // Show the updated popup menu
        popupMenu.show(optionsButton, optionsButton.getWidth() / 2, optionsButton.getHeight() / 2);
    });

    buttonPanel.add(optionsButton);

    panel.add(userDetailsPanel, BorderLayout.CENTER);
    panel.add(buttonPanel, BorderLayout.EAST);

    return panel;
}
private JPanel createGroupPanel(Group group) {
    UserAccount account = getAcc(authorId);
    MembersFileManager membersFileManager = new MembersFileManager("Members_lists", "Member");
    MembersFileManager adminsFileManager = new MembersFileManager("Admins_lists", "Admins");
    ArrayList<UserAccount> groupMembers = membersFileManager.loadMembers(group.getGroupId());
    UserAccount groupOwner = group.getOwner();
    ArrayList<UserAccount> groupAdmins = adminsFileManager.loadMembers(group.getGroupId());

    boolean isMember = isUserInGroup(groupMembers, account);
    boolean isAdmin = isUserInGroup(groupAdmins, account);
    boolean isOwner = groupOwner.getUser().getUserId().equals(account.getUser().getUserId());

    JPanel panel = new JPanel(new BorderLayout());
    panel.setBackground(Color.decode("#121212"));
    panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

    // Group Picture
    JLabel groupPictureLabel = new JLabel(new ImageIcon(group.getPhoto()));
    groupPictureLabel.setPreferredSize(new Dimension(75, 75));
    panel.add(groupPictureLabel, BorderLayout.WEST);

    // Group details (GroupName and Description)
    JPanel groupDetailsPanel = new JPanel();
    groupDetailsPanel.setBackground(Color.decode("#121212"));
    groupDetailsPanel.setLayout(new BoxLayout(groupDetailsPanel, BoxLayout.Y_AXIS));

    // Adding the Group Name
    JLabel groupNameLabel = new JLabel(group.getName());
    groupNameLabel.setFont(new Font("Arial", Font.BOLD, 14));
    groupNameLabel.setForeground(Color.WHITE);
    groupDetailsPanel.add(groupNameLabel);

    // Adding the Description
    JLabel groupDescriptionLabel = new JLabel(group.getDiscription());
    groupDescriptionLabel.setFont(new Font("Arial", Font.ITALIC, 14));
    groupDescriptionLabel.setForeground(Color.LIGHT_GRAY);
    groupDetailsPanel.add(groupDescriptionLabel);

    // Button Panel
    JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
    buttonPanel.setBackground(Color.decode("#121212"));
    JButton optionsButton = new JButton("...");
    optionsButton.setBackground(Color.decode("#121212"));
    optionsButton.setForeground(Color.WHITE);
    optionsButton.setPreferredSize(new Dimension(40, 30));
    optionsButton.setFocusPainted(false);

    // Create the popup menu
    JPopupMenu popupMenu = new JPopupMenu();

    // Dynamic menu generation based on the user's role
    optionsButton.addActionListener(e -> {
        popupMenu.removeAll(); // Clear previous items

        if (isOwner) {
            addOwnerMenu(popupMenu, account, group);
        } else if (isAdmin || isMember) {
            addMemberOrAdminMenu(popupMenu, account, group);
        } else {
            addNonMemberMenu(popupMenu, account, group);
        }

        popupMenu.show(optionsButton, optionsButton.getWidth() / 2, optionsButton.getHeight() / 2);
    });

    buttonPanel.add(optionsButton);
    panel.add(groupDetailsPanel, BorderLayout.CENTER);
    panel.add(buttonPanel, BorderLayout.EAST);

    return panel;
}

// Helper method to check if the user is in the group (member or admin)
private boolean isUserInGroup(ArrayList<UserAccount> groupUsers, UserAccount account) {
    for (UserAccount user : groupUsers) {
        if (user.getUser().getUserId().equals(account.getUser().getUserId())) {
            return true;
        }
    }
    return false;
}

// Add menu for group owners
private void addOwnerMenu(JPopupMenu popupMenu, UserAccount account, Group group) {
    JMenuItem viewGroupItem = new JMenuItem("View Group");
    viewGroupItem.addActionListener(viewEvent -> new GroupWindow(account, group)); // View the group as the owner
    popupMenu.add(viewGroupItem);
}

// Add menu for group members or admins
private void addMemberOrAdminMenu(JPopupMenu popupMenu, UserAccount account, Group group) {
    JMenuItem viewGroupItem = new JMenuItem("View Group");
    JMenuItem leaveGroupItem = new JMenuItem("Leave Group");

    viewGroupItem.addActionListener(viewEvent -> new GroupWindow(account, group)); // View the group
    leaveGroupItem.addActionListener(leaveEvent -> {
        new commonRole().leaveGroup(account, group);
        JOptionPane.showMessageDialog(null, "You have left the group.", "Group Left", JOptionPane.INFORMATION_MESSAGE);
    });

    popupMenu.add(viewGroupItem);
    popupMenu.add(leaveGroupItem);
}

// Add menu for non-members (users who need to send a request to join)
private void addNonMemberMenu(JPopupMenu popupMenu, UserAccount account, Group group) {
    JMenuItem sendRequestItem = new JMenuItem("Send Request");
    sendRequestItem.addActionListener(requestEvent -> {
        // Logic to add the user to the request list
        MembersFileManager requestsFileManager = new MembersFileManager("requests_lists", "Requests");
        ArrayList<UserAccount> req = requestsFileManager.loadMembers(group.getGroupId());
        req.add(account); // Add the user to the request list
        requestsFileManager.saveMembers(group.getGroupId(), req); // Save the updated list
        
        JOptionPane.showMessageDialog(null, "Request sent to join the group.", "Request Sent", JOptionPane.INFORMATION_MESSAGE);
    });
    popupMenu.add(sendRequestItem);
}





  private void displaySearchResults(HashSet<UserAccount> accounts,HashSet<Group> groups) {
    BlockingListFileManager fileManager = new BlockingListFileManager();
    ArrayList<UserAccount> blockingList = fileManager.loadBlockingList(authorId);

    JPanel containerPanel = new JPanel();
    containerPanel.setLayout(new BoxLayout(containerPanel, BoxLayout.Y_AXIS)); // Set vertical layout
    containerPanel.setBackground(Color.decode("#121212"));
    ArrayList<String> ids = new ArrayList<>() ;
    // Add a panel for each user who is NOT in the blocking list
    for(UserAccount user: blockingList)
    {
        ids.add(user.getUser().getUserId());
    }
    // and remove me from the search Engine Supposedly 
    ids.add(authorId);
   for(UserAccount users: accounts)
   {
       if(!ids.contains(users.getUser().getUserId()))
       {
            JPanel userPanel = createFriendPanel(users);
            containerPanel.add(userPanel);
            containerPanel.add(Box.createRigidArea(new Dimension(0, 10))); // Add vertical spacing
       }
   }
for (Group gro: groups)
{
    JPanel groupPanel = createGroupPanel(gro);
            containerPanel.add(groupPanel);
            containerPanel.add(Box.createRigidArea(new Dimension(0, 10))); // Add vertical spacing
}
    // Set the containerPanel as the viewport for jScrollPane1
    jScrollPane1.setViewportView(containerPanel);

    // Refresh the UI
    revalidate();
    repaint();
}

public UserAccount getAcc(String id) {
    ArrayList<UserAccount> accounts = new AccountLoad().loadAccounts();
        for (UserAccount user : accounts) {
            if (user.getUser().getUserId().equals(id)) {
                return user;
            }
        }
        return null;
    }



   
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField input;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
